#+STARTUP: showall indent

* Fakeymacs functions manual

** 関数（Functions）

拡張機能（Extensions）を作成する際に利用する可能性がある関数は以下のとおりです。

*** ■ checkWindow

ウィンドウが指定した条件に該当するかチェックする

**** Function

#+BEGIN_EXAMPLE
def checkWindow(process_name, class_name, text, window=None):
#+END_EXAMPLE

**** Parameters

|--------------+-------------------------------------------------------------------------------------------|
| Parameter    | Description                                                                               |
|--------------+-------------------------------------------------------------------------------------------|
| process_name | ウインドウの所属するプロセス名（Unix のシェル形式のワイルドカードで指定可能）             |
| class_name   | ウインドウのクラス名（Unix のシェル形式のワイルドカードで指定可能）                       |
| text         | ウインドウのタイトル文字列（Unix のシェル形式のワイルドカードで指定可能）                 |
| window       | pyauto.Windowオブジェクト（default 値の場合はキーボードフォーカスを持っているウインドウ） |
|--------------+-------------------------------------------------------------------------------------------|

**** Returns

- True : 該当する
- False : 該当しない

*** ■ define_key

キーマップにキーを定義する

**** Function

#+BEGIN_EXAMPLE
def define_key(window_keymap, keys, command, skip_check=True):
#+END_EXAMPLE

**** Parameters

|---------------+----------------------------------------------------------|
| Parameter     | Description                                              |
|---------------+----------------------------------------------------------|
| window_keymap | WindowKeymapオブジェクト                                 |
| keys          | 設定するキー（マルチストロークのキーはスペースで区切る） |
| command       | 実行するコマンド（関数）                                 |
| skip_check    | キー設定のスキップ判定を行うかどうかを指定する           |
|---------------+----------------------------------------------------------|

**** Returns

- 無し

*** ■ define_key2

キーマップにキーを定義する（skip_settings_key に定義したキーであっても設定するバージョン）

**** Function

#+BEGIN_EXAMPLE
def define_key2(window_keymap, keys, command):
#+END_EXAMPLE

**** Parameters

|---------------+----------------------------------------------------------|
| Parameter     | Description                                              |
|---------------+----------------------------------------------------------|
| window_keymap | WindowKeymapオブジェクト                                 |
| keys          | 設定するキー（マルチストロークのキーはスペースで区切る） |
| command       | 実行するコマンド（関数）                                 |
|---------------+----------------------------------------------------------|

**** Returns

- 無し

*** ■ define_key3

キーマップにキーを定義する（キーに定義されている関数に新しいコマンドを分岐実行させるバージョン）

**** Function

#+BEGIN_EXAMPLE
def define_key3(window_keymap, keys, command, chek_func):
#+END_EXAMPLE

**** Parameters

|---------------+--------------------------------------------------------|
| Parameter     | Description                                            |
|---------------+--------------------------------------------------------|
| window_keymap | WindowKeymapオブジェクト                               |
| keys          | キーの定義（マルチストロークのキーはスペースで区切る） |
| command       | 実行するコマンド（関数）                               |
| check_func    | 新しいコマンドを実行するかを判定する関数                                     |
|---------------+--------------------------------------------------------|

**** Returns

- 無し

*** ■ mergeMultiStrokeKeymap

第2引数の WindowKeymapオブジェクトのキーマップにに第1引数の WindowKeymapオブジェクトの
キーマップをマージ（上書き）し、第1引数の WindowKeymapオブジェクトのキーマップに設定する

**** Function

#+BEGIN_EXAMPLE
def mergeMultiStrokeKeymap(window_keymap1, window_keymap2, keys):
#+END_EXAMPLE

**** Parameters

|----------------+----------------------------------|
| Parameter      | Description                      |
|----------------+----------------------------------|
| window_keymap1 | WindowKeymapオブジェクト1        |
| window_keymap2 | WindowKeymapオブジェクト2        |
| keys           | マージするマルチストロークのキー |
|----------------+----------------------------------|

**** Returns

- 無し

*** ■ getKeyAction

キーにより実行されるアクションを取り出す関数を返す

**** Function

#+BEGIN_EXAMPLE
def getKeyAction(key):
#+END_EXAMPLE

**** Parameters

|-----------+----------------------------------------------|
| Parameter | Description                                  |
|-----------+----------------------------------------------|
| key       | キーにより実行されるアクションを取り出すキー |
|-----------+----------------------------------------------|

**** Returns

- キーにより実行されるアクションを取り出す関数

*** ■ getKeyCommand

キーに定義されている関数を返す

**** Function

#+BEGIN_EXAMPLE
def getKeyCommand(window_keymap, keys):
#+END_EXAMPLE

**** Parameters

|---------------+------------------------------------------------------------------------------|
| Parameter     | Description                                                                  |
|---------------+------------------------------------------------------------------------------|
| window_keymap | WindowKeymapオブジェクト                                                     |
| keys          | 定義されている関数を取り出すキー（マルチストロークのキーはスペースで区切る） |
|---------------+------------------------------------------------------------------------------|

**** Returns

- キーに定義されている関数

*** ■ makeKeyCommand

キーに定義されている関数に新しいコマンドを分岐実行させる新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def makeKeyCommand(window_keymap, keys, command, check_func):
#+END_EXAMPLE

**** Parameters

|---------------+------------------------------------------------------------------------------|
| Parameter     | Description                                                                  |
|---------------+------------------------------------------------------------------------------|
| window_keymap | WindowKeymapオブジェクト                                                     |
| keys          | 定義されている関数を取り出すキー（マルチストロークのキーはスペースで区切る） |
| command       | 新しく実行するコマンド（関数）                                               |
| check_func    | 新しいコマンドを実行するかを判定する関数                                     |
|---------------+------------------------------------------------------------------------------|

**** Returns

- キーに定義されている関数に新しいコマンドを分岐実行させる新たな関数

*** ■ InputKeyCommand

キーを入力する関数を返す
（Microsoft Word 等で Ctrl に反応してサブウインドウが開き、そのサブウインドウに
カーソルが移動するのを抑制する対策がされた keymap.InputKeyCommand 関数を返す）

**** Function

#+BEGIN_EXAMPLE
def InputKeyCommand(*key_list, usjis_conv=True):
#+END_EXAMPLE

**** Parameters

|------------+------------------------------------------------------------|
| Parameter  | Description                                                |
|------------+------------------------------------------------------------|
| *key_list  | 入力するキーの羅列（キー文字列をカンマで区切って指定する） |
| usjis_conv | キーの US -> JIS 変換を行うかどうかを指定する              |
|------------+------------------------------------------------------------|

**** Returns

- 引数で指定したキーを入力する関数

*** ■ self_insert_command

キーを入力する関数を返す（InputKeyCommand の上位関数）

**** Function

#+BEGIN_EXAMPLE
def self_insert_command(*key_list, usjis_conv=True):
#+END_EXAMPLE

**** Parameters

|------------+------------------------------------------------------------|
| Parameter  | Description                                                |
|------------+------------------------------------------------------------|
| *key_list  | 入力するキーの羅列（キー文字列をカンマで区切って指定する） |
| usjis_conv | キーの US -> JIS 変換を行うかどうかを指定する              |
|------------+------------------------------------------------------------|

**** Returns

- 引数で指定したキーを入力する関数

*** ■ self_insert_command2

キーを入力する関数を返す
（Emacs 日本語入力モード使用時で IME が ON の際、文字を入力すると Emacs 日本語入力モード
に移行するバージョン）

**** Function

#+BEGIN_EXAMPLE
def self_insert_command2(*key_list, usjis_conv=True):
#+END_EXAMPLE

**** Parameters

|------------+------------------------------------------------------------|
| Parameter  | Description                                                |
|------------+------------------------------------------------------------|
| *key_list  | 入力するキーの羅列（キー文字列をカンマで区切って指定する） |
| usjis_conv | キーの US -> JIS 変換を行うかどうかを指定する              |
|------------+------------------------------------------------------------|

**** Returns

- 引数で指定したキーを入力する関数

*** ■ self_insert_command3

キーを入力する関数を返す（キーの入力後、IME を OFF にするバージョン）

**** Function

#+BEGIN_EXAMPLE
def self_insert_command3(*key_list, usjis_conv=True):
#+END_EXAMPLE

**** Parameters

|------------+------------------------------------------------------------|
| Parameter  | Description                                                |
|------------+------------------------------------------------------------|
| *key_list  | 入力するキーの羅列（キー文字列をカンマで区切って指定する） |
| usjis_conv | キーの US -> JIS 変換を行うかどうかを指定する              |
|------------+------------------------------------------------------------|

**** Returns

- 引数で指定したキーを入力する関数

*** ■ mark

mark がセットされていれば、その mark から func で移動した場所までのリージョンを拡張する
ための新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def mark(func, forward_direction):
#+END_EXAMPLE

**** Parameters

|-------------------+-------------------------------------------------------------------------------------|
| Parameter         | Description                                                                         |
|-------------------+-------------------------------------------------------------------------------------|
| func              | 処理を施す関数                                                                      |
| forward_direction | func で指定した関数が前方に進む処理の場合は True、そうでない場合は False を指定する |
|-------------------+-------------------------------------------------------------------------------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ mark2

func で移動した場所までのリージョンを拡張するための新たな関数を返す
（Shift を使ったリージョン拡張処理などで利用）

**** Function

#+BEGIN_EXAMPLE
def mark2(func, forward_direction):
#+END_EXAMPLE

**** Parameters

|-------------------+-------------------------------------------------------------------------------------|
| Parameter         | Description                                                                         |
|-------------------+-------------------------------------------------------------------------------------|
| func              | 処理を施す関数                                                                      |
| forward_direction | func で指定した関数が前方に進む処理の場合は True、そうでない場合は False を指定する |
|-------------------+-------------------------------------------------------------------------------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ reset_mark

mark の状態を reset する新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def reset_mark(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ reset_counter

repeat counter の状態を reset する新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def reset_counter(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ reset_undo

undo/redo の状態を undo に reset する新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def reset_undo(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ reset_search

検索中の状態を reset する新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def reset_search(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ repeat

数引数の値に従い、repeat の処理を施した新たな関数を返す

**** Function

#+BEGIN_EXAMPLE
def repeat(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ repeat2

数引数の値に従い、repeat の処理を施した新たな関数を返す
（リーションが設定してある場合は、一回のみ処理を行うバージョン）

**** Function

#+BEGIN_EXAMPLE
def repeat2(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ repeat3

数引数の値に従い、repeat の処理を施した新たな関数を返す
（repaet 回数を func の引数で渡すバージョン）

**** Function

#+BEGIN_EXAMPLE
def repeat3(func):
#+END_EXAMPLE

**** Parameters

|-----------+----------------|
| Parameter | Description    |
|-----------+----------------|
| func      | 処理を施す関数 |
|-----------+----------------|

**** Returns

- 引数で指定した func に本関数の処理を施した新たな関数

*** ■ delay

処理を指定した時間停止する

**** Function

#+BEGIN_EXAMPLE
def delay(sec=0.02):
#+END_EXAMPLE

**** Parameters

|-----------+---------------------------------------|
| Parameter | Description                           |
|-----------+---------------------------------------|
| sec       | 停止する秒数（デフォルト値は 0.02秒） |
|-----------+---------------------------------------|

**** Returns

- 無し
